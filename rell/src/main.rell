module;

import lib.ft4.auth;
import lib.ft4.accounts.strategies.open;
import lib.ft4.core.accounts.{ account, Account, create_account_with_auth, single_sig_auth_descriptor };
import lib.ft4.external.assets.{ get_asset_balances };
import lib.ft4.assets.{ asset, Unsafe, balance };


@extend(auth.auth_handler)
function () = auth.add_auth_handler(
    flags = ["T"]
);

operation register_and_mint_asset(
    asset_name: text,
    symbol: text,
    decimals: integer,
    amount: big_integer,
    icon_url: text
) {
    val owner_account = auth.authenticate();
    require(get_asset_balances(owner_account.id, 10, null).data.empty(), "One asset allowed");
    functions.register_and_mint_asset(owner_account, asset_name, symbol, decimals, amount, icon_url);
}

namespace functions {
    function register_and_mint_asset(
        owner_account: account,
        asset_name: name,
        symbol: text,
        decimals: integer,
        amount: big_integer,
        icon_url: text
    ) {

   // Derive id of the asset
        val asset_id = (asset_name, chain_context.blockchain_rid).hash();

   // check if the asset already exists
        val asset = asset @ ? { .id == asset_id };
        if (not empty(asset)) return;

        val asset_created = Unsafe.register_asset(asset_name, symbol, decimals, chain_context.blockchain_rid, icon_url);
        Unsafe.mint(owner_account, asset_created, amount);
    }
}